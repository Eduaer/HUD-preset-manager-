import os
import shutil

# === Lista das libs/pastas que PODEM SER APAGADAS com seguran√ßa ===
REMOVE_DIRS = [
    # Banco de dados / legado
    "adodbapi", "backports", "dbm",
    
    # Empacotamento / instala√ß√£o
    "altgraph", "attrs", "attr", "exceptiongroup", "packaging",
    "_distutils_hack", "PyInstaller", "_pyinstaller_hooks_contrib", "zstandard",
    
    # HTTP / rede (n√£o usado no seu projeto)
    "cachetools", "certifi", "charset_normalizer", "idna",
    "urllib3", "requests", "h11", "outcome", "sniffio",
    "trio", "trio_websocket", "wsproto", "websocket", "webdriver_manager",
    
    # Automa√ß√£o / input
    "keyboard", "mouseinfo", "pyautogui", "pygetwindow", "pymsgbox",
    "pyperclip", "pyrect", "pyscreeze", "pytweening",
    
    # Extras que n√£o usa
    "click", "colorama", "ordlookup", "ordered_set", "sortedcontainers", "driver",
    "isapi",
    
    # GUI alternativas
    "PIL", "PySimpleGUI",
]

# Subpastas in√∫teis mesmo em libs √∫teis
REMOVE_SUBDIRS = ["demos", "demo", "test", "tests", "samples", "tools"]

def limpar_site_packages(base_dir):
    print(f"üîç Limpando site-packages em: {base_dir}")
    
    for item in os.listdir(base_dir):
        item_path = os.path.join(base_dir, item)

        # Remove diret√≥rios inteiros da lista
        if os.path.isdir(item_path) and item in REMOVE_DIRS:
            print(f"üóëÔ∏è Removendo pasta: {item_path}")
            shutil.rmtree(item_path, ignore_errors=True)
            continue
        
        # Remove arquivos .dist-info e .egg-info de pacotes descartados
        if (item.endswith(".dist-info") or item.endswith(".egg-info")):
            for lib in REMOVE_DIRS:
                if lib.lower() in item.lower():
                    print(f"üóëÔ∏è Removendo metadata: {item_path}")
                    shutil.rmtree(item_path, ignore_errors=True)
                    break
        
        # Dentro de pacotes que voc√™ mant√©m ‚Üí limpa testes/demos
        if os.path.isdir(item_path):
            for sub in REMOVE_SUBDIRS:
                sub_path = os.path.join(item_path, sub)
                if os.path.exists(sub_path):
                    print(f"üßπ Limpando subpasta in√∫til: {sub_path}")
                    shutil.rmtree(sub_path, ignore_errors=True)

if __name__ == "__main__":
    # Detecta automaticamente a pasta onde o script est√°
    base_dir = os.path.dirname(os.path.abspath(__file__))
    limpar_site_packages(base_dir)
    print("‚úÖ Limpeza conclu√≠da!")
